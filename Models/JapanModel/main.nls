
;; main.nls


;;
;  go for one time step
to go
  
  if ticks = prospective-year [stop]
  
  population-evolution
  
  economic-evolution
  
  update-display
  
  tick
  
end


;;
;  populations
to population-evolution
  
   endogeneous-population-evolution
   
   exogeneous-population-evolution
   
   migrations
  
   ask cities [set realized-populations lput population realized-populations set yearly-expected-populations lput city-current-expected-population yearly-expected-populations]
  
end


;;
;  TODO : non symmetric growth factor ?
to endogeneous-population-evolution
  ask cities [
     let growth-factor random-normal mean-gibrat-pop sigma-gibrat-pop
     let previous-pop population
     set population population * growth-factor
     set delta-population population - previous-pop
  ]
end


;;
;  Migrations from outside the country
to exogeneous-population-evolution
  
  ;; TODO : for now included in Gibrat dynamics
  
end


;;
;  Here effects of Economy on population are taken into account
to migrations
  if with-migrations? [
      ; tertiray dynamics induce migrations
      ;  by \phi_i->j = migration-rate * ∆ delta-economic-tertiary
      ;   brute force algo : compute all flows for i≠j and do migrations
      ;   dirty : list of flows to other cities as city variable -- !! not explicit ¡¡
      
      ; compute flows
      ask cities [set population-flows []]
      let cities-list to-list cities let i 0
      while [i < length cities-list - 1][
        let j i + 1 let c1 item i cities-list
        while [j < length cities-list][
          let c2 item j cities-list
          let flow migration-rate * ([delta-economic-tertiary] of c1 - [delta-economic-tertiary] of c2) * [population] of c2
          ask c1 [set population-flows lput (list [who] of c2 flow) population-flows]
          set j j + 1  
        ]
        set i i + 1
      ]
      
      ; do migrations
      ask cities [
        foreach population-flows [
          let delta-pop last ? let who-of-c2 first ?
          if [population] of city who-of-c2 - delta-pop > city-min-pop and population + delta-pop > city-min-pop [
            ask city who-of-c2 [set population population - delta-pop]
            set population population + delta-pop 
          ]
        ] 
      ]
      
  ]
end






to economic-evolution
  if with-economic? [
     ; pop dynamics -> secondary ?
     ; dE_2 = k_2 dP ; no agglo effect ?
     ; dE_3 = k_3 dP + k33 E_3 <- pref att on tertiary.
     
     ;  if E_i(0) = P^alpha , then dE_i = d[P^alpha] = alpha P^(alpha - 1) dP   ==> k_2 = alpha P^(alpha - 1) ?
     ;  -- can be directly integrated --
     
     ask cities [
       set economic-secondary population ^ population-to-wealth-exponent
       
       ; tertiary
       set delta-economic-tertiary (population-to-wealth-exponent * (population ^ (population-to-wealth-exponent - 1)) * delta-population) + tertiary-growth * economic-tertiary
       set economic-tertiary economic-tertiary + delta-economic-tertiary
     ]
  ]
end

