
;; setup

to setup
  ;; init
  init-setup
  
  setup-globals
  
  if setup-type = "random" [
    setup-random-layout
  ]
  if setup-type = "gis" [
    setup-world
    setup-cities
  ]
  
  finish-setup
  
end



to init-setup
  ca
  reset-ticks
end


to setup-globals
  
  ; built-in vars
  set initial-year 1950
  set present-year 2015
  set prospective-year 2030
  
  ; gis files
  set gis-world-file "setup/gis/coastline/jp_dcw_cst_pgn.shp"
  set gis-cities-file "setup/gis/cities/jp_toku_dmyo_pts.shp"
  
  
  
  
end

;;
;  - read gis boundaries ; setup according world size
;  - draw gis ?
;  - other physical accessibility conditions ?
to setup-world
  
  ; setup world envelope
  let bounds-layer gis:load-dataset "setup/gis/bbox/bounds.shp"
  ; resize world proportionaly 
  let envelope gis:envelope-of bounds-layer let env-ratio ((item 1 envelope - item 0 envelope) / (item 3 envelope - item 2 envelope)) 
  resize-world -30 30 (floor (-30 / env-ratio)) (floor (30 / env-ratio)) set-patch-size 10
  
  gis:set-world-envelope envelope
  gis:set-drawing-color blue gis:fill gis:load-dataset "setup/gis/bbox/fill.shp" 1
  
  ; load dataset
  set gis-world gis:load-dataset gis-world-file
  
  ; set projection and boundaries ?
  gis:set-drawing-color brown
  ;gis:draw gis-world 1
  gis:fill gis-world 1
  
  ; draw world : sea, boundaries etc
  
  
  
  
  
end



to setup-cities
   
   ; load cities dataset   
  set gis-cities gis:load-dataset gis-cities-file 
  
  gis:set-drawing-color red gis:draw gis-cities 2
  
  ; assumed as point shapefile
  foreach gis:feature-list-of gis-cities [
     let point-list first gis:vertex-lists-of ?
     let point first point-list
     let loc gis:location-of point
     
     let pop gis:property-value ? "POPULATION"
     let eco-secondary gis:property-value ? "ECONOMIC_2"
     let eco-tertiary gis:property-value ? "ECONOMIC_3"
     
     
  ] 
  
  
  
end


;;
; random world organisation
;  for test purposes
to setup-random-layout
  
  resize-world -30 30 -30 30 set-patch-size 10
  
  ;  -> use christaller-zipf synthetic generator
  generate-cities
  
  
  
end




to finish-setup
  
end